#!/usr/bin/env node

/**
 * Script de diagnostic pour v√©rifier :
 * 1. Connexion wallet/signer
 * 2. Storage IPFS/Storacha
 * 3. Contrats blockchain
 */

const { ethers } = require('ethers');

async function checkWalletConnection() {
  console.log('\nüîê === TEST CONNEXION WALLET ===');
  
  try {
    // Simuler une connexion wallet
    if (typeof window === 'undefined') {
      console.log('‚ö†Ô∏è  Environnement Node.js - simulation wallet');
      
      // Test avec provider public
      const provider = new ethers.providers.JsonRpcProvider('https://sepolia.base.org');
      const blockNumber = await provider.getBlockNumber();
      console.log('‚úÖ Provider public connect√© - Block:', blockNumber);
      
      return true;
    }
    
    if (window.ethereum) {
      console.log('‚úÖ MetaMask d√©tect√©');
      const provider = new ethers.providers.Web3Provider(window.ethereum);
      const signer = provider.getSigner();
      const address = await signer.getAddress();
      console.log('‚úÖ Wallet connect√©:', address);
      
      const network = await provider.getNetwork();
      console.log('‚úÖ R√©seau:', network.name, '- ChainID:', network.chainId);
      
      return true;
    } else {
      console.log('‚ùå Wallet non d√©tect√©');
      return false;
    }
  } catch (error) {
    console.log('‚ùå Erreur connexion wallet:', error.message);
    return false;
  }
}

async function checkStorachaConnection() {
  console.log('\nüì¶ === TEST STORAGE IPFS/STORACHA ===');
  
  try {
    // Import dynamique pour √©viter les erreurs en Node.js
    const { create } = await import('@storacha/client');
    
    console.log('‚úÖ Client Storacha import√©');
    
    // Tenter de cr√©er un client
    const client = create();
    console.log('‚úÖ Client Storacha cr√©√©');
    
    // Test de connexion (ne fonctionne qu'en environnement browser)
    if (typeof window !== 'undefined') {
      try {
        await client.login('zifou.rail.91290@gmail.com');
        console.log('‚úÖ Connexion Storacha r√©ussie');
        
        // Test des espaces
        const spaces = client.spaces();
        console.log('‚úÖ Espaces disponibles:', Array.from(spaces).length);
        
        return true;
      } catch (error) {
        console.log('‚ö†Ô∏è  Erreur login Storacha:', error.message);
        if (error.message.includes('expired')) {
          console.log('üí° Solution: Relancer `npx @storacha/cli login`');
        }
        return false;
      }
    } else {
      console.log('‚ö†Ô∏è  Test Storacha n√©cessite un environnement browser');
      return true; // Pas d'erreur, juste pas testable ici
    }
  } catch (error) {
    console.log('‚ùå Erreur Storacha:', error.message);
    return false;
  }
}

async function checkContracts() {
  console.log('\n‚õìÔ∏è  === TEST CONTRATS BLOCKCHAIN ===');
  
  try {
    const contractAddresses = {
      PriceConsumerV3: "0xa5050E4FC5F7115378Bbf8bAa17517298962bebE",
      DivarProxy: "0x89Eba0c82c1f16433473A9A06690BfaAC2c7a1b4",
      CampaignKeeper: "0x7BA165d19De799DA8070D3c1C061933551726D1E"
    };
    
    const provider = new ethers.providers.JsonRpcProvider('https://sepolia.base.org');
    
    for (const [name, address] of Object.entries(contractAddresses)) {
      try {
        const code = await provider.getCode(address);
        if (code === '0x') {
          console.log(`‚ùå ${name}: Pas de contrat √† l'adresse ${address}`);
        } else {
          console.log(`‚úÖ ${name}: Contrat d√©ploy√© √† ${address}`);
        }
      } catch (error) {
        console.log(`‚ùå ${name}: Erreur v√©rification - ${error.message}`);
      }
    }
    
    return true;
  } catch (error) {
    console.log('‚ùå Erreur v√©rification contrats:', error.message);
    return false;
  }
}

async function testCreateCampaignPrerequisites() {
  console.log('\nüöÄ === TEST PR√âREQUIS CR√âATION CAMPAGNE ===');
  
  const results = {
    wallet: await checkWalletConnection(),
    storage: await checkStorachaConnection(), 
    contracts: await checkContracts()
  };
  
  console.log('\nüìä === R√âSUM√â ===');
  console.log('Wallet:', results.wallet ? '‚úÖ' : '‚ùå');
  console.log('Storage:', results.storage ? '‚úÖ' : '‚ùå');  
  console.log('Contrats:', results.contracts ? '‚úÖ' : '‚ùå');
  
  const allGood = Object.values(results).every(r => r === true);
  
  if (allGood) {
    console.log('\nüéâ Tous les syst√®mes sont op√©rationnels!');
    console.log('üí° Tu peux tester la cr√©ation de campagne');
  } else {
    console.log('\n‚ö†Ô∏è  Des probl√®mes ont √©t√© d√©tect√©s');
    console.log('üí° Corrige les erreurs avant de cr√©er une campagne');
  }
  
  return results;
}

// Ex√©cution si appel√© directement
if (require.main === module) {
  testCreateCampaignPrerequisites()
    .then(() => process.exit(0))
    .catch((error) => {
      console.error('‚ùå Erreur script diagnostic:', error);
      process.exit(1);
    });
}

module.exports = {
  checkWalletConnection,
  checkStorachaConnection,
  checkContracts,
  testCreateCampaignPrerequisites
};